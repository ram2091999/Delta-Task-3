//jshint esversion:6
const express=require("express");
const app= express();
const bodyParser=require("body-parser");
const ejs=require("ejs");
const lodash=require("lodash");
const mongoose=require("mongoose");
const session=require("express-session");
const passport=require("passport");
const passportLocalMongoose=require("passport-local-mongoose");

var currrentUser;
app.use(express.static("public"));
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({extended: true}));
app.use(express.static("public"));
users=[];

app.use(session({
  secret:"Our little secret.",
  resave:false,
  saveUninitialized: false
}));

app.use(passport.initialize());
app.use(passport.session());


mongoose.connect("mongodb://localhost:27017/userDB",{useNewUrlParser:true});

const userSchema=new mongoose.Schema({
  username:String,
  password:String
});
const formSchema=new mongoose.Schema({
  username:String,
  formsArray:Array
});

userSchema.plugin(passportLocalMongoose);
const Form=new mongoose.model("Form",formSchema);
const User=new mongoose.model("User",userSchema);

passport.use(User.createStrategy());

passport.serializeUser(function(user, done) {
  done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  User.findById(id, function(err, user) {
    done(err, user);
  });
});







app.get("/",function(req,res){

  res.render("home",{});
});
app.get("/login",function(req,res){

  res.render("login",{});
});
app.post("/login",function(req,res){
  const user=new User({
    username:req.body.username,
    password:req.body.password
  });
  req.login(user,function(err){
    if(err){
      console.log(err);
      res.redirect("/login");
    }
    else{
      passport.authenticate("local")(req,res,function(){
        res.redirect("/user/"+user.username);
      });

    }
  });
app.get("/logout",function(req,res){
  passport.logout();
  res.redirect("/newForm"+currrentUser);
});



});
var newForm=[];
app.get("/user/:currrentUser",function(req,res){

  if(req.isAuthenticated()){
    newForm=[];
    userForms=Form.find({username:req.params.currrentUser},"formsArray").then((output)=>{
      console.log(output);
    });



    user=req.params.currrentUser;
    res.render("user",{user:user});
  }

  else{
    res.redirect("/login");
  }
});
app.get("/formHeader/:user",function(req,res){
  newForm=[];
  currrentUser=req.params.user;
  res.render("formHeader",{user:currrentUser});
});
app.post("/formHeader/:user",function(req,res){
  currrentUser=req.params.user;
  newForm.push(currrentUser);
  newForm.push(req.body.formTitle);
  res.redirect("/newForm/"+currrentUser);
});



app.get("/userHome",function(req,res){
  res.render("userHome",{user:currrentUser});
});
app.get("/signup",function(req,res){
  res.render("signup",{});
});
app.post("/signup",function(req,res){

  User.register({username:req.body.username},req.body.password,function(err,user){
    if(err){
      console.log(err);
      res.redirect("/signup");
    }
    else{
      passport.authenticate("local")(req,response,function(){
        res.redirect("/login");
      });
    }


  });
  res.redirect("/login");



});

app.get("/newForm/:user",function(req,res){
  currrentUser=req.params.user;
  newForm[0]=currrentUser;
  res.render("newForm",{user:currrentUser,newForm:newForm});
});
app.post("/newForm/:user",function(req,res){
  //newForm.push(req.body.formTitle);
    currrentUser=req.params.user;
  Form.find({username:currrentUser},function(err,doc){
    if(!doc.length){
      let formUser=new Form({username:currrentUser,formsArray:[]});
    }
  });
  Form.findOneAndUpdate({username:currrentUser},{$push:{formsArray:newForm}});
  res.redirect("/user/"+currrentUser);
  });
  app.get("/addInput/:user",function(req,res){
    currrentUser=req.params.user;
    res.render("addField",{user:currrentUser});

  });

app.post("/addInput/:user",function(req,res){
  currrentUser=req.params.user;
  var options={
    fieldName:req.body.fieldName,
    fieldType:req.body.fieldType
  };
  newForm.push(options);
  res.redirect("/newForm/"+currrentUser);

});
app.listen(3000,function(){
  console.log("Listening in port 3000");
});
